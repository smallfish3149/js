1.基本数据类型的值保存在栈内存，变量相互独立不影响，对象保存到堆内存
2.使用对象字面量创建对象并设置属性和值：
            var obj1 = {name:"何超东",age:26,gender:"男"};
3.函数也是一个对象：
        function fun([var a,var b]){
            
        }
4.立即执行函数：(function(a,b)({dou);}))(12,13);
5.枚举对象中的属性：for ... in object
        例子：for(var n in obj1){
                doucment.write(n);
        }
6.在全局作用域中，创建的变量都会作为window对象的属性保存，可以通过window.属性名访问，创建的函数都会作为window对象的方法保存
7.变量声明提前：使用var关键字声明的变量，会在所有的代码执行前声明（但是不会赋值）
8.函数声明提前：使用函数声明形式声明的函数：function fun(){},它会在所有代码被执行之前创建，可以在函数声明前调用
9.全局作用域在页面打开时创建，在页面关闭时销毁，全局作用域中：
        创建的变量都会作为window对象的属性保存
        创建的函数都会作为window对象中的方法保存
        全局变量在页面的任意位置都可以访问
10.函数作用域：
        调用函数时创建函数作用域，函数执行完毕之后函数作用域销毁
        当函数操作一个变量的时候，会先在函数作用域找，如果没有再向上一个作用域中寻找
        在函数作用域中也有声明提前这个特性
        形参就相当于在函数作用域中声明了变量
11.this关键字：
        函数调用的方式不同，this指向不同的对象：
                以函数形式调用时，this永远指向window。
                以方法形式调用时，this就是调用方法的对象
12.使用工厂方法创建对象:
                    function createPersion(name, age, gender) {
                var obj = { 
                    name: name, 
                    age: age, 
                    gender: gender,
                    sayname : function (){document.write(this.name);}
                };
                return obj;
            }
13.构造函数：
                function Persion(name,age,gender){
                    this.name=name;
                    this.age=age;
                    this.gender=gender;
                }
                var per =new Persion("smallfish", 26, "男");
                console.log(per);
                        执行过程：
                                a.创建一个新的对象
                                b.将新建的对象设置为函数中的this
                                c.逐行执行函数中的代码
                                d.将新建的对象作为返回值返回
14.使用instanceof可以检查一个对象是否是一个类的实例:per instanceof Persion
15.不要在构造函数里面定义方法，因为每当new一个对象构造函数就会被执行一次，函数也是对象所以会被重复创建函数对象，
        应该在全局作用域定义函数，在构造函数里面赋值。
16.将函数定义在全局作用域，污染了全局作用域的命名空间，也不安全。
17.原型：prototype
                每创建一个函数，解析器都会在函数中添加一个属性prototype，
                熟悉prototype对应着一个对象，这个对象就是原型对象
                当函数以构造函数的形式调用时，它创建的对象都会有一个隐含的熟悉，指向构造函数的原型对象可以通过__proto__来访问该熟悉
        原型对象就相当于一个公共区域所以同一个实例的对象都可以访问到这个原型对象
        当访问一个属性或方法时，会现在对象自身中寻找，如果没有就去原型对象中寻找
18.以后创建构造函数时，可以将对象共有的属性和方法同意添加到构造函数的原型对象中，不用为每一个对象添加也不会影响全局作用域
19.可以使用hasOwnProperty检查对象自身是否有该属性
20.原型对象也是对象，当使用一个属性或方法时，会在自身里面找，自身找不到就去原型对象里面找，
        原型对象找不到就去原型的原型对象里面找，直到找到的原型时Object，Object没有原型对象，依然没有找到就返回undenfine
21.
        内建对象
        宿主对象
22.数组(Array)
                数组也是一个对象，不同的是普通对象使用字符串作为属性名，数组使用数字作为索引操作元素。
                创建数组对象：var arr = new Array();
                向数组最后一个位置添加元素：arr[arr.length]=5;
        使用字面量创建数组：var arr =[0,1,2,3,4];
        使用构造函数创建数组：var arr =new Array(0,1,2,3,4);
        数组的元素可以说任意数据类型

        数组方法：
                push:末尾添加元素，返回值是数组新的长度
                pop:删除并返回数组的最后一个元素
                unshift:向数组的开头添加元素，返回数组新长度
                shift:删除数组第一个元素，并返回新数组长度
                slice:从某个已有数组返回选定元素,不会改变原数组，封装到一个新数组返回。
                        用法：arr.alice(start.end);
                        包括start，不包含end。
                        第二个参数可以不写，默认到length
                        索引可以传递负值，从后往前计算
                splice:删除指定元素，改变原数组，添加新元素，返回被删元素。
                        用法：arr.splice(index,mount);
                        参数：
                                1.起始索引
                                2.删除个数
                                3.在索引位置添加元素
        数组遍历：
        forEach:()方法需要一个函数作为参数
        arr.forEach(function(value,index,obj){

        })
                这种函数由我们创建但不由我们调用，这叫回调函数
                函数中有几个元素就会执行几次每次执行浏览器会将遍历到的元素以实参的形式传递进来，可以定义形参来读取这些数据
                浏览器会在回调函数传递三个参数：1.当前遍历的元素。2.当前正在遍历的索引。3.正在遍历的数组。
23.数组剩余方法：
        contact：连接两个或者更多数组
        join:将数组转化为一个字符串并返回，可以指定一个字符串作为参数用于连接符(默认使用,连接)。不改变原数组
        reverse：反转数组，并改变原数组
        sort:用于数组元素排序(默认unicode编码排序)，改变原数组。
                        如果是比较数字，还是根据Unicode编码进行排序，得到的可能是错误的结果，处理方法如下：
                                写一个回调函数：arr.sort(function(a,b){
                                        if(a>b){
                                                return 1;
                                        }else if(a<b){
                                                return -1;
                                        }else return 0;
                                        //return a-b;
                                })
24.函数的方法：需要通过函数对象来调用
        call:可以将实参才对象之后以此传入
        apply:需要将实参封装到数组中传入
        在调用这两个函数是，可以将一个对象指定为第一个参数，此时这个对象就是this
25.this的情况：
        a.以函数形式调用，this永远是window
        b.方法形式调用时，this是调用方法的对象
        c.以构造函数形式调用时，this是新创建的对象使用call和apply调用时，this是我们指定的对象
25.arguments:类数组对象，即使不定义形参，也可以通过arguments来使用实参(下标访问)
        在调用函数时，浏览器会传递两个参数：
                1.函数上下文的对象this
                2.封装实参的对象arguments
        它有一个属性叫callee，指向当前函数对象
26.Date对象
        1.直接使用构造函数创建一个Date对象，就会封装当前代码执行时间
        2.指定封装的时间日期格式："月/日/年 时:分:秒"
                方法：
                        getDate():获取当前日期对象是几日(返回0-30)
                        getDay():获取当前日期是周几(返回0-6，分别是周日-周六)
                        getMonth():获取当前日期对象是几月(返回0-11)
                        getFullYear():获取年份
27.Math
        和其他对象不同，它不是一个构造函数，属于一个工具类，封装了数学运算相关的属性和方法
        ceil():向上取整
        floor():向下取整
        round():四舍五入
        random():生成一个x-y之间的随机数：Math.round(Math.random()*(y-x)+x);
28.包装类：Number String Boolean
        var num = new Number(3)         //创建一个number类型的对象
                实际应用中不会使用数据类型对象，这样在做一些比较时可能会带来不可预期的结果

29.字符串方法
        chaAt:返回字符串指定位置的字符
        charCodeAt:返回字符串指定位置的字符unicode编码
        String.fromCharCode:根据字符编码获取字符
        indexOf:返回字符第一次出现的索引，没有找到指定字符返回-1
30.正则表达式：字符规则
        创建正则表达式的对象
        var reg = new RegExp(正则表达式,匹配模式);
        -----------
                []里的内容是或关系
                [ab]==a|b
                [a-z]任意小写字母
                [A-Z]任意大写字母
                [A-z]任意字母
                /a[bde]c/=abc-adc-aec其中一个
                [^ab]除了ab
                [0-9]任意数字
        语法：
                //创建一个正则表达式是否含义aaa
                量词：var reg=/a{3}/；只对前面一个内容起作用
                        {n}:正好出现n次
                        {m,n}:出现m-n次
                        {m,}:出现m次以上
                        n+:至少一个
                        n*:0个或多个
                        n?:0个或一个
                        ^a:以a开头
                        a$:以a结尾
                        .：表示任意字符
                        \:转义字符
                        \.:表示点
                        \w:任意字母、数字、_([A-z0-9_])
                        \W:除了字母、数字、_(^[A-z0-9_])
                        \d:任意数字[0-9]
                        \D:除了数字^[0-9]
                        \s:空格
                        \S:除了空格
                        \b:单词边界
                        \B:除了单词边界
                        /^\s*|\s*$/g:去除字符串前后的空格
        邮件的正则：任意字母数字下划线.任意字母数字下划线@任意字母数字.任意字母(2-5)
        /^w{3,}(\.\w+)*@[A-z0-9]+(\.[A-z]{2-5}){1,2}$/

31.DOM
        浏览器已经为我们提供文档节点，这个对象是window属性，全局变可以直接在页面中使用文档节点代表整个网页
32.事件：用户和浏览器之间的交互行为，比如点击按钮鼠标移动关闭窗口
        可以在事件对应的属性中设置一些js代码，事件触发时代码会执行
        //可以为按钮的对应事件绑定函数的形式来响应事件
        var btn = document.getElementById("btn");
        btn.innerHTML = "先生，您好！";
        btn.onclick = function (){
            alert("ggg");
        }
33.文档加载：
        浏览器加载一个页面时，按照自上而下的顺序加载，读取到一行就运行一行
        onload事件会在整个页面加载完成之后才触发
        为window绑定一个onlooad事件：
                        该事件对应的响应函数将会在页面加载完成之后执行，这样可以确保执行
                        代码时所有DOM对象已经加载完毕了
                        
        DOM查询：
        获取元素节点，doucument调用
                getElementById
                getElementsByTagName
                getElementByName
        获取元素子节点：具体元素节点调用
                方法：
                        getElementsByTagName
                属性：
                childNodes
                firstChild
                lastChild
34.DOM查询其他方法：
        doucment.querySelector()        需要一个选择器的字符串作为参数，可以根据一个css选择器来查
                                                                        询一个元素节点对象：doucment.querySelector(".box div");        //选择box中的div对象
        doucment.body
        doucment.doucmentElement
        doucment.all
        doucment.querySelectorAll()     返回数组
35.dom增删改
        appendChild()                           父节点添加一个子节点            city.innerHTML +="<li>广州</li>";
        removeChild()                           父节点调用，被删除节点作为参数传递进去  bj.parentNode.removeChild(bj);
        replaceChild()                           父节点调用，被替换节点作为参数传递进去
        insertBefore()                            city.insertBefore(li,bj);父节点调用。两个参数，新插入的在前面
        createAttribute()
        createTextNode()                     创建文本节点，需要一个文本name作为参数
        createElement()                       创建元素节点，需要一个标签名作为参数
36.confirm      弹出一个带有确认和取消的提示框          返回值是一个布尔值
37.通过js修改元素的样式：元素.style.样式名 = 样式值;
        如果css样式名中含有-，这种名称在js中是不合法的，比如background-color，这种需要使用驼峰命名法
        通过style修改的都是内联样式，具有较高的优先级
        通过style样式读取的样式也是内联样式，无法读取样式表的样式
38.读取元素的样式(正在显示的样式)：如果当前元素没有样式，则获取它们的默认值
        语法：  
                元素.currentStyle.样式名 = 样式值;(只有IE支持)
        其他浏览器：
                getComputerStyle();(不支持IE8)
                        需要两个参数：
                                                        要获取样式的元素
                                                        传递一个伪元素，一般传null
                        该方法会返回一个对象，当前元素中封装了当前元素对应的样式，可以通过对象.样式名来读取样式。
                        如果当前元素没有样式，会获取到真实值，不是默认值
        通过currentStyle和getComputerStyle读取到的样式都是只读的，要修改样式还是要通过对象.style.样式名来修改内联样式
 39.其他样式操作的属性：
        clientHeight:可见高度
        clientWidth:可见宽度
                返回的是数字，不带px。获取宽度和高度，包括内容区，不包括边框
                这些属性都是只读的，不能修改。
        offsetHeight:获取元素整个高度，包括边框
        offsetWidth:获取元素整个宽度，包括边框

        offsetParent：
                可以用来获取当前元素的定位父元素
                会获取到离当前元素最近的开启了定位元素的祖先元素，如果所有的祖先元素都没有开启定位，则返回body
        offsetLeft:返回相对定位元素的水平偏移位置
        offsetTop:返回相对定位元素的垂直偏移位置

        scrollLeft:获取水平滚动条滚动的距离
        scrollTop:获取垂直滚动条滚动的距离
        当scrollHeight - scrollTop == clientHeight,说明滚动条已经滚动到底了
40.滚动条事件触发onscroll
41.onmousemove          鼠标在元素中移动会触发
42.事件对象：当事件的响应函数被触发时，浏览器每次都会将一个事件对象作为实参传递进响应函数
                        var x = event.clientX;
                        var y = event.clientY;
                        box2.innerHTML = "("+x+","+y+")";
                        clientX和clientY 用于获取鼠标在当前可见窗口的坐标
                        pageX和pageY    相对于当前页面的坐标
                在IE8中，响应函数被触发时，浏览器不会传递事件对象，IE8及以下，事件对象都是作为window对象的属性保存的
                解决浏览器直接的事件对象兼容性问题：enent = event || window.event;
43.事件的冒泡Bubble:事件的向上传导，当后代元素上的事件被触发时，其祖先元素相同事件也会被触发
        在开发中冒泡大部分都是有用的，如果不希望事件冒泡，可以通过事件对象取消冒泡 event.cancelBubble = true;
44.事件的委派:将元素统一绑定给元素的共同祖先
        绑定一次事件，颗应用到多个元素上，即使元素是后添加的
        target          event中触发事件的对象
                        u1.onclick = function(event){
                        event = event || window.event;
                        if(event.target.className == "link") alert("kkk");        
        }
45.事件的绑定
        使用对象.事件方式绑定的响应函数，只能同时为一个元素的一个事件绑定一个响应函数，绑定多个，只要最后一个生效。
        addEventListener()              可以为对象绑定单击响应函数              btn =addEventListener("click"，function(){},false);
                参数：
                                事件的字符串，不用on，例如oncilck ==》click                     
                                回调函数
                                是否在捕获阶段触发事件，只需一个布尔值，一般选false
                可以为相同元素的相同事件绑定多个响应函数，它们会按顺序执行
        不支持IE8及以下，
                IE用attachEvent：
                                参数：
                                                事件字符串，要on
                                                回调函数
                        绑定多个响应函数时，逆序执行
46.事件的传播
        W3C综合了两个公司的方案，将事件传播分成3个阶段：
                1.捕获阶段      从最外层的祖先元素，想目标元素进行事件的捕获，但是默认不会触发事件
                2.目标阶段      捕获到目标元素，开始在目标元素上触发事件
                3.冒泡阶段      事件从目标元素向祖先元素传递，依次触发祖先元素事件
        如果希望在捕获阶段开始触发事件，addEventListener() 的第三个参数，false
47.setCapture
48.鼠标滚轮事件 
        onmouseWheel            //火狐不认，火狐时候DOMMouseScroll，需要通过addEventListener() 函数来绑定
                event.wheelDelta        获取鼠标滚轮滚动的方向上120，下-120
                                火狐使用event.detail上-3，下3
49.使用addEventListener() 函数绑定响应函数，取消默认行为不能使用return false；应该使用event.preventDefault  && event.preventDefault();
50.键盘事件：键盘对象一般都会绑定给一些可以获取焦点(类似于input)的对象或者是doucument
        onkeydown       如果一直按着按键不放手，事件会连续触发，连续触发时，第一次和第二次间隔长一点，其他都会很快，为了防止误操作
        onkeyup                 松开一次触发一次，不会连续触发

        keyCode         可以判断哪个按键被按下

        altKey                                          判断这三个按键是否被按下，是返回ture
        ctrKey
        shiftKey

        在input文本框中输入内容，属于onmousedown的默认行为，如果取消默认行为，即return false；则输入的内容不会出现在文本框中
51.BOM  浏览器对象模型，可以使我们可以操作浏览器
                BOM为我们提供了一组对象，用来完成对浏览器的操作：
                        Window                  代表浏览器整个窗口，同时也是网页中的全局对象
                        Navigator               代表当前浏览器的信息，通过该对象我们可以识别不同的浏览器,由于历史原因，它的大部分属性都不能帮助我们识别浏览器了
                                                                一般时候userAgent来判断浏览器信息
                                                                        userAgent是一个字符串，字符串中包含描述浏览器的信息内容
                        Location                 代表当前浏览器的地址栏信息     如果把location属性修改为一个完整路径或相对路径，页面就会自动跳转，并且生成相应的历史记录
                                                                assign：用来跳转到其他页面，和修改location属性效果一样，字符串路径作为路径
                                                                reload：刷新，true作为参数，强制清空缓存刷新页面
                                                                replace：新页面替换当前页面，不生成历史记录(不能回退按钮回退)
                        History                    代表浏览器的历史记录，由于隐私原因该对象不能获取到具体的历史记录，只能操作浏览向后或者向前翻页，该操作只在当次访问有效
                        Screen                     代表用户屏幕信息
52.定时器
        如果希望一段程序每间隔一段时间执行一次，可以使用定时调用
        setInterval()           可以将一个函数每隔一段时间执行一次
        参数：
                        1.回调函数
                        2.每次调用间隔时间，单位是毫秒
                返回值：返回一个Number型的数据，数字作为定时器的唯一标识符
        clearInterval：可以用来关闭一个定时器，需要一个定时器的标识符作为参数
                        可以接受任意参数，如果参数是一个有效的定时器标识，则停止定时器，否则什么都不处理
53.延时调用：一个函数不马上执行，隔一段事件再执行，只会执行一次
        setTimeout
        clearTimeout            关闭延时调用

54.类的操作
        通过style属性修改样式，没修改一次画面浏览器就会重新渲染一次，这样性能比较差。这种形式修改多个样式不太方便。
        可以通过修改元素的class属性来间接修改样式：box.className = "box2";      box.className  += " box2"

55.JSON
        JS中的对象只有js自己认识，其他语言不认识。
        JSON就算一个特殊格式的字符串，可以被任何语言识别，并且可以转成任意语言中的对象，开发中主要用来数据的交互
        JSON和js对象格式一样，不过字符串属性名必须加双引号
        JSON分类：
                                1.对象{}
                                2.数组[]
        JSON中允许的值：字符串、数值、布尔值、null、对象(普通对象，不能是函数)、数值

        将JSON字符串转化为js中的对象：
                在js中，提供了一个工具类，叫JSON，这个对象可以为我们将一个json转化为js对象，也可以将js对象转化为json
                        JSON.parse();           可以将JSON字符串转为js对象，需要一个JSON字符串作为参数，js对象返回
                        JSON.stringify();       js对象转JSON
                        eval();                                 可以用来执行一段字符串形式的js代码，并将结果返回。不希望其当成代码块解析，需要在字符串前后加上();在开发者尽量不用，性能较差、而且具有安全隐患
                        


